/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * result.java
 *
 * Created on 13 May, 2020, 5:46:57 PM
 */

package module1;

/**
 *
 * @author DELL
 */
import java.util.*;
import java.lang.*;







public class result extends javax.swing.JFrame {

    /** Creates new form result */

    String[] cols;
    String[] multi_attr;
    boolean multi;
    int no_of_fdss;
    String fdss[][];
    String[] alpha;
    String[] key_list;
    int no_of_keys;


    public result(String[] cols,boolean multi,String[] multi_attr,String[][] fdss,int no_of_fdss,String[] alpha,String[] key_list,int no_of_keys)
    {
        initComponents();
        this.cols = cols;
        this.multi = multi;
        this.multi_attr = multi_attr;
        this.no_of_fdss = no_of_fdss;
        this.fdss = fdss;
        this.alpha = alpha;
        this.key_list = key_list;
        this.no_of_keys = no_of_keys;
        lb2.setEditable(false);


        String[] keys = new String[no_of_keys];

        for(int i=0;i<no_of_keys;i++)
        {
            String temp = "";
            for(int j=0;j<key_list[i].length();j++)
            {
                temp+=cols[key_list[i].charAt(j)-'a']+" ";
            }
            keys[i]=temp;
        }


        for(int i=0;i<no_of_keys;i++)
        {
            cmb1.addItem(keys[i]);
        }



    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lb2 = new javax.swing.JTextArea();
        cmb1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        lb1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        lb2.setBackground(new java.awt.Color(153, 153, 153));
        lb2.setColumns(20);
        lb2.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lb2.setRows(5);
        lb2.setBorder(null);
        jScrollPane1.setViewportView(lb2);

        cmb1.setBackground(new java.awt.Color(0, 153, 153));
        cmb1.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        cmb1.setForeground(new java.awt.Color(255, 255, 255));
        cmb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Run");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lb1.setFont(new java.awt.Font("Calibri", 1, 28)); // NOI18N
        lb1.setForeground(new java.awt.Color(255, 255, 255));
        lb1.setText("Key: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lb1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmb1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lb1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmb1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 766, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int in = cmb1.getSelectedIndex();
        String key = key_list[in];
        key = sortString(key);
        call(key);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb1ActionPerformed

    /**
    * @param args the command line arguments
    */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmb1;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb1;
    private javax.swing.JTextArea lb2;
    // End of variables declaration//GEN-END:variables



   boolean[] BCNFvis = new boolean[26];


    public String sortString(String inputString)
    {
        char tempArray[] = inputString.toCharArray();
        Arrays.sort(tempArray);
        return new String(tempArray);
    }

    public String closure(String attributes, String X, int no_of_fds, String fds[][])
    {
        System.out.println("yo");
        String closure=X;
        String newclosure=X;
        do{
            closure=newclosure;
            for(int i=0;i<no_of_fds;i++)
            {
                boolean flag = true;
                boolean flag0 = true;
                boolean flag1 = true;
                for(int u=0;u<fds[i][0].length();u++)
                {
                    String temp=""+fds[i][0].charAt(u);
                    if(!attributes.contains(temp))
                    {
                        flag=false;
                        break;
                    }
                }

                for(int u=0;u<fds[i][1].length();u++)
                {
                    String temp=""+fds[i][1].charAt(u);
                    if(!attributes.contains(temp))
                    {
                        flag=false;
                        break;
                    }
                }

                for(int u=0;u<fds[i][0].length();u++)
                {
                    String temp=""+fds[i][0].charAt(u);
                    if(!newclosure.contains(temp))
                    {
                        flag0=false;
                        break;
                    }
                }

                for(int u=0;u<fds[i][1].length();u++)
                {
                    String temp=""+fds[i][1].charAt(u);
                    if(!newclosure.contains(temp))
                    {
                        flag1=false;
                        break;
                    }
                }


                if(flag0 && flag)
                {
                    if(flag1)
                        continue;
                    else
                    {
                        for(int h=0;h<fds[i][1].length();h++)
                        {
                            String st = "";
                            st+=fds[i][1].charAt(h);
                            if(!(newclosure.contains(st)))
                            {
                                newclosure+=st;
                            }
                        }
                        newclosure=sortString(newclosure);
                    }
                }
            }

        }while(!(closure.equals(newclosure)));


        boolean[] freq = new boolean[26];

        for(int i=0;i<26;i++)
            freq[i]=false;

        for(int i=0;i<newclosure.length();i++){

            freq[newclosure.charAt(i)-'a']=true;
        }

        closure="";

        for(int i=0;i<26;i++)
            if(freq[i])
                closure+=(char)('a'+i);
        //System.out.println(closure);
        return closure;
    }

    public String key(String attributes, String fds[][], int no_of_fds)
    {
        String key=attributes;
//        String attributes1=attributes;
        int itr=attributes.length();
        int no_of_subsets=((itr)*(itr+1))/2;
        //String[][] fds = new String[no_of_fds][2];
        String[] subsets=new String[no_of_subsets];
        int subset_count=0;

        for(int len=1;len<=attributes.length(); len++)
        {
            for(int i=0;i<=attributes.length()-len;i++)
            {

                int j = i + len ;
                String curr="";

                for(int k=i;k<j;k++)
                    curr+=attributes.charAt(k);

                subsets[subset_count++]=curr;
            }
        }

//        for(int k=0;k<no_of_subsets;k++)
//        {
//            System.out.println(subsets[k]);
//        }

//        System.out.println();

        for(int k=0;k<no_of_subsets;k++)
        {
              String temp=sortString(subsets[k]);
//            itr=attributes.length();

//            for(int i=0;i<itr;i++)
//            {
//                String temp ="";
//
//                for(int j=0;j<key.length();j++)
//                {
//                    if(key.charAt(j)==attributes.charAt(i))
//                        continue;
//                    else
//                        temp+=key.charAt(j);
//                }
//
//              System.out.println(temp+" "+closure(temp,no_of_fds,fds)+" "+attributes);
              if((closure(attributes,temp,no_of_fds,fds)).equals(attributes) && key.length()>temp.length())
                {
                    key=temp;
//                    System.out.println(temp + " " + closure(temp,no_of_fds,fds));
                    break;
                }
//            }
        }

        return key;
    }


    public boolean convto1NF(String attributes, String Key,Scanner sc)
    {
        /*System.out.println("Are there any multivalued attributes?(y/n)");
        char ch=sc.next().charAt(0);
        sc.nextLine();*/
        if(multi)
        {
            //System.out.println("Unnormalized table\nEnter multivalued attributes to convert to 1NF:");
            lb2.setText("Unnormalized table");
            //String multi_attributes=sc.nextLine();
            String multi_attributes="";
            for(int i=0;i<multi_attr.length;i++)
            {
                multi_attributes+=multi_attr[i];
            }

            boolean[] freq = new boolean[26];

            for(int i=0;i<26;i++)
                freq[i]=false;

            for(int i=0;i<multi_attributes.length();i++)
                freq[multi_attributes.charAt(i)-'a']=true;

            String temp="";

            for(int i=0;i<attributes.length();i++)
            {
                if(freq[attributes.charAt(i)-'a'])
                    continue;
                else
                    temp+=attributes.charAt(i);
            }

            attributes=temp;

            String no_attributes = attributes.replace(" ","");
            String gui_attributes="";
            for(int i=0;i<no_attributes.length();i++)
            {
                gui_attributes+=cols[no_attributes.charAt(i)-'a']+" ";
            }

            //System.out.println("1NF:\nTable 1: "+attributes);
            lb2.setText(lb2.getText().toString()+"\n"+"1NF:\nTable: "+gui_attributes);

            String no_key = Key.replace(" ","");
            String gui_key="";
            for(int i=0;i<no_key.length();i++)
            {
                gui_key+=cols[no_key.charAt(i)-'a']+" ";
            }

            for(int i=0;i<multi_attributes.length();i++)
            {
                int j=i+1;
                //System.out.println("Table "+(j)+": "+Key+multi_attributes.charAt(i));
                lb2.setText(lb2.getText().toString()+"\n"+"Table"+": "+gui_key+cols[multi_attributes.charAt(i)-'a']);
            }
            return false;
        }
        else
            return true;

    }

    public boolean convto2NF(String attributes, String Key, Scanner sc, int no_of_fds, String fds[][])
    {
        if(Key.length()==1)
            return true;

        boolean[] vis = new boolean[26];

        for(int i=0;i<26;i++)
           vis[i]=false;

        int no_of_subsets=(Key.length()*(Key.length()+1))/2;

        //String[][] fds = new String[no_of_fds][2];
        String[] subsets=new String[no_of_subsets];
        int subset_count=0;

        for(int len=1;len<=Key.length(); len++)
        {
            for(int i=0;i<=Key.length()-len;i++)
            {

                int j = i + len - 1;
                String curr="";

                for(int k=i;k<=j;k++)
                    curr+=Key.charAt(k);

                subsets[subset_count++]=curr;
            }
        }

        boolean check=true;
        String full_check="";
        int table_no=0;

        for(int i=0;i<no_of_subsets-1;i++)
        {
            for(int x=0;x<no_of_fds;x++)
            {



                boolean flag = true;
                for(int u=0;u<fds[x][0].length();u++)
                {
                    String temp=""+fds[x][0].charAt(u);
                    if(!subsets[i].contains(temp))
                    {
                        flag=false;
                        break;
                    }
                }


                if(flag)
                {
                    if(check)
                    {
                        //System.out.println("Relation in 1NF form convered to 2NF:");
                        lb2.setText("Relation in 1NF form convered to 2NF:");
                    }

                    check=false;
                    String ans="";

                    for(int m=0;m<fds[x][1].length();m++)
                        if(!vis[(fds[x][1].charAt(m))-'a'])
                        {
                            ans+=fds[x][1].charAt(m)+" ";
                            vis[(fds[x][1].charAt(m))-'a']=true;
                        }

                    if(ans.length()!=0){
                        //System.out.print("Table:"+(++table_no)+" ");
                        lb2.setText(lb2.getText().toString()+"\n"+"Table:"+" ");
                        ++table_no;
                        for(int h=0;h<subsets[i].length();h++)
                        {
                            //System.out.print(subsets[i].charAt(h)+" ");
                            lb2.setText(lb2.getText().toString()+cols[subsets[i].charAt(h)-'a']+" ");
                        }

                        String no_ans = ans.replace(" ","");
                         String ans_gui = "";
                         for(int y=0;y<no_ans.length();y++)
                         {
                             ans_gui+=cols[no_ans.charAt(y)-'a']+" ";
                         }

                        //System.out.println(ans);
                        lb2.setText(lb2.getText().toString()+ans_gui);
                    }


                    for(int m=0;m<26;m++)
                        if(vis[m])
                           full_check+=(char)('a'+m);

                    full_check  = sortString(full_check);
                    if(full_check.equals(attributes))
                        break;
                }
            }
            if(full_check.equals(attributes))
                    break;
        }
        if(!check)
        {
            String temp="";
            for(int i=0;i<attributes.length();i++)
                if(vis[attributes.charAt(i)-'a']==false)
                {
                    temp+=attributes.charAt(i)+" ";
                }
            if(temp.length()!=0)
            {
                String no_temp = temp.replace(" ","");
                String temp_gui = "";
                for(int y=0;y<no_temp.length();y++)
                {
                    temp_gui+=cols[no_temp.charAt(y)-'a']+" ";
                }
                //System.out.println("Table "+(++table_no)+": "+temp);
                lb2.setText(lb2.getText().toString()+"\n"+"Table"+": "+temp_gui);
                ++table_no;
            }

        }

        return check;
    }

//    public static String[][] minimalcover(String F[][], int len)
//    {
//        int new_no_of_fds=0;
//        for(int i=0;i<len;i++)
//            for(int j=0;j<F[i][1].length();j++)
//                    new_no_of_fds++;
//
//        String[][] new_fds= new String[new_no_of_fds][2];
//
//        int cnt=0;
//        for(int i=0;i<len;i++)
//            for(int k=0;k<F[i][1].length();k++)
//            {
//                new_fds[cnt][1]="";
//                new_fds[cnt][1]+=F[i][1].charAt(k);
//                new_fds[cnt++][0]=F[i][0];
//            }
//
//        len=new_no_of_fds;
//        for(int i=0;i<len;i++)
//        {
//            for(int j=0;j<new_fds[i][0].length();j++)
//            {
//                String argument="";
//                for(int k=0;k<new_fds[i][0].length();k++)
//                    if(new_fds[i][0].charAt(k)!=new_fds[i][0].charAt(j))
//                        argument+=new_fds[i][0].charAt(k);
//
//                if(closure(argument,len,new_fds).contains(F[i][1]))
//                    new_fds[i][0]=argument;
//            }
//        }
//        return new_fds;
//    }

    public boolean convto3NF( String attributes, String fds[][], int no_of_fds,String Key )
    {

        boolean[] vis = new boolean[26];
        boolean check=true;

        for(int i=0;i<26;i++)
           vis[i]=false;

        int t_no=0;
        for(int i=0;i<no_of_fds;i++)
        {
            String newTable="";

            boolean flag = true;
                for(int u=0;u<fds[i][1].length();u++)
                {
                    String temp=""+fds[i][1].charAt(u);
                    if(!Key.contains(temp))
                    {
                        flag=false;
                        break;
                    }
                }

                if(!(fds[i][0].equals(Key) || flag))
                {
                    if(check)
                    {
                        //System.out.println("Relation in 2NF form convered to 3NF:");
                        lb2.setText("Relation in 2NF form convered to 3NF:");
                    }

                    check=false;
                    for(int k=0;k<fds[i][0].length();k++){
                        newTable+=fds[i][0].charAt(k)+" ";
                    }

                    for(int k=0;k<fds[i][1].length();k++)
                    {
                        String key_check = "";
                        key_check+=fds[i][1].charAt(k);
                        if(vis[fds[i][1].charAt(k)-'a']==false && !key_check.equals(Key))
                            {
                                 newTable+=fds[i][1].charAt(k)+" ";
                                 vis[fds[i][1].charAt(k)-'a']=true;
                            }
                    }

                        String no_newtable = newTable.replace(" ","");
                         String newtable_gui = "";
                         for(int y=0;y<no_newtable.length();y++)
                         {
                             newtable_gui+=cols[no_newtable.charAt(y)-'a']+" ";
                         }

                    //System.out.println("Table "+(++t_no)+": "+newTable);
                    lb2.setText(lb2.getText().toString()+"\n"+"Table "+": "+newtable_gui);
                    ++t_no;
                }
        }

        if(!check)
        {
            String temp="";
            for(int i=0;i<attributes.length();i++)
                if(vis[attributes.charAt(i)-'a']==false)
                {
                    temp+=attributes.charAt(i)+" ";
                }
            if(temp.length()!=0)
            {


                String no_temp = temp.replace(" ","");
                String temp_gui = "";
                for(int y=0;y<no_temp.length();y++)
                {
                    temp_gui+=cols[no_temp.charAt(y)-'a']+" ";
                }



                //System.out.println("Table "+(++t_no)+": "+temp);
                lb2.setText(lb2.getText().toString()+"\n"+"Table "+": "+temp_gui);
                ++t_no;
            }
        }

        return check;
    }

    public boolean check1=true;

    public boolean convtoBCNF( String attributes, String fds[][], int no_of_fds,String Key)
    {
        boolean check=true;

        for(int i=0;i<no_of_fds;i++)
        {


            boolean flag = true;
                for(int u=0;u<fds[i][0].length();u++)
                {
                    String temp=""+fds[i][0].charAt(u);
                    if(!attributes.contains(temp))
                    {
                        flag=false;
                        break;
                    }
                }

                for(int u=0;u<fds[i][1].length();u++)
                {
                    String temp=""+fds[i][1].charAt(u);
                    if(!attributes.contains(temp))
                    {
                        flag=false;
                        break;
                    }
                }
            fds[i][0] = sortString(fds[i][0]);
            Key = sortString(Key);

            String str1 = closure(attributes,fds[i][0],no_of_fds,fds);
            attributes = sortString(attributes);
            str1 = sortString(str1);

            if(str1.equals(attributes)==false && flag )
            {

                if(check1)
                {
                    lb2.setText("Relation in 3NF converted to BCNF: ");
                    //System.out.println("table in 3NF converted to BCNF: ");
                    check1=false;
                }
                check=false;
                String tab1="";

                for(int j=0;j<fds[i][0].length();j++)
                {
                    tab1+=fds[i][0].charAt(j)+" ";
                    BCNFvis[fds[i][0].charAt(j)-'a']=true;
                }

                for(int j=0;j<fds[i][1].length();j++)
                {
                    if(!BCNFvis[fds[i][1].charAt(j)-'a'])
                        tab1+=fds[i][1].charAt(j)+" ";

                    BCNFvis[fds[i][1].charAt(j)-'a']=true;
                }

                String no_tab1 = tab1.replace(" ","");
                String tab1_gui = "";
                for(int y=0;y<no_tab1.length();y++)
                {
                    tab1_gui+=cols[no_tab1.charAt(y)-'a']+" ";
                }


                //System.out.println("Table: "+tab1);
                lb2.setText(lb2.getText().toString()+"\n"+"Table: "+tab1_gui);

                String tab2="";

                String beta=sortString(fds[i][1]);
                String alpha=sortString(fds[i][0]);
                String diff="";

                for(int j=0;j<beta.length();j++)
                {
                    String X="";
                    X+=beta.charAt(j);

                    if(alpha.contains(X))
                        continue;
                    else
                        diff+=beta.charAt(j);
                }

                for(int j=0;j<attributes.length();j++)
                {
                    String X="";
                    X+=attributes.charAt(j);

                    if(diff.contains(X))
                        continue;
                    else
                    {
                        tab2+=attributes.charAt(j)+" ";
                        BCNFvis[attributes.charAt(j)-'a']=true;
                    }
                }

//               fds[i][0]="##";

                String no_tab2 = tab2.replace(" ","");
                String tab2_gui = "";
                for(int y=0;y<no_tab2.length();y++)
                {
                    tab2_gui+=cols[no_tab2.charAt(y)-'a']+" ";
                }

                //System.out.println("Table: "+tab2);
                lb2.setText(lb2.getText().toString()+"\n"+"Table: "+tab2_gui);


               tab1 = tab1.replace(" ","");
               tab1=sortString(tab1);
               String newKey=key(tab1,fds,no_of_fds);
               convtoBCNF(tab1,fds,no_of_fds,newKey);

               tab2 = tab2.replace(" ","");
               tab2=sortString(tab2);
               newKey=key(tab2,fds,no_of_fds);
               convtoBCNF(tab2,fds,no_of_fds,newKey);

            }
        }

        return check;
    }

    public void call(String pk)
    {
        Scanner sc = new Scanner(System.in);
        String attributes = "";

        for(int i=0;i<alpha.length;i++)
        {
            attributes+=alpha[i];
        }
        attributes=sortString(attributes);

        int no_of_fds = no_of_fdss;
        String[][] fds = fdss;



//        System.out.println(closure(fds[0][0],no_of_fds,fds));

        //String Key=key(attributes,fds,no_of_fds);
        String Key = pk;
        System.out.println(Key);
        String gui_key="";
        for(int i=0;i<Key.length();i++)
        {
            gui_key+=cols[Key.charAt(i)-'a']+" ";
        }

        lb1.setText("Key: "+gui_key);
        //System.out.println("KEY: "+Key);

        for(int i=0;i<26;i++)
           BCNFvis[i]=false;


//        static boolean[] FDvis = new boolean[no_of_fds];
//
//        for(int i=0;i<no_of_fds;i++)
//           FDvis[i]=false;

        if(convto1NF(attributes,Key,sc))
            if(convto2NF(attributes,Key,sc,no_of_fds,fds))
                if(convto3NF(attributes,fds,no_of_fds,Key))
                {
                    if(convtoBCNF(attributes,fds,no_of_fds,Key))
                    {
                        //System.out.println("Table already in BCNF form");
                        lb2.setText("\n"+"Table already in BCNF form");
                    }
                    else
                    {
                        String fin="";
                        boolean check=false;
                        for(int i=0;i<attributes.length();i++)
                        {
                            if(BCNFvis[i]==false)
                            {
                                fin+=attributes.charAt(i)+" ";
                                BCNFvis[i]=true;
                                check=true;
                            }
                        }
                        if(check==true)
                        {
                         //System.out.println("Table: "+fin);
                         String no_fin = fin.replace(" ","");
                         String fin_gui = "";
                         for(int y=0;y<no_fin.length();y++)
                         {
                             fin_gui+=cols[no_fin.charAt(y)-'a']+" ";
                         }
                         lb2.setText(lb2.getText().toString()+"\n"+"Table: "+fin_gui);
                        }
                    }
                }

    }












}
